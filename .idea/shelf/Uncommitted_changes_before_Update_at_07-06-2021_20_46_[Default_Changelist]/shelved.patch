Index: app/src/main/java/shopping/grocery/medicine/online/deals/coupons/compare/buy/view/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package shopping.grocery.medicine.online.deals.coupons.compare.buy.view\r\n\r\nimport android.app.Dialog\r\nimport android.content.ActivityNotFoundException\r\nimport android.content.Intent\r\nimport android.net.Uri\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.view.WindowManager\r\nimport android.widget.ImageView\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AlertDialog\r\nimport androidx.fragment.app.FragmentPagerAdapter\r\nimport androidx.lifecycle.Observer\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.recyclerview.widget.GridLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.google.android.material.tabs.TabLayout\r\nimport com.google.firebase.analytics.FirebaseAnalytics\r\nimport com.google.firebase.remoteconfig.BuildConfig\r\nimport com.google.firebase.remoteconfig.FirebaseRemoteConfig\r\nimport com.yalantis.contextmenu.lib.ContextMenuDialogFragment\r\nimport com.yalantis.contextmenu.lib.MenuObject\r\nimport com.yalantis.contextmenu.lib.MenuParams\r\nimport github.com.st235.lib_expandablebottombar.ExpandableBottomBar\r\nimport kotlinx.android.synthetic.main.activity_main.*\r\nimport kotlinx.android.synthetic.main.bookmark_layout.*\r\nimport me.toptas.fancyshowcase.FancyShowCaseView\r\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.R\r\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.base.BaseActivity\r\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.utils.Constants\r\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.utils.CustomViewPager\r\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.utils.ForceUpdateChecker\r\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.utils.Pref\r\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.view.adapter.home.AllAppsAdapter\r\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.view.listener.AllAppsItemClickListener\r\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.viewmodel.CategoryViewModel\r\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.viewmodel.DealsViewModel\r\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.viewmodel.HomeViewModel\r\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.viewpager.AppPagerAdapter\r\n\r\n\r\nclass MainActivity : BaseActivity(), AllAppsItemClickListener<List<String>>,\r\n    ForceUpdateChecker.OnUpdateNeededListener {\r\n\r\n    var viewPager: CustomViewPager? = null\r\n    var viewPagerTab: TabLayout? = null\r\n    var fragmentPagerAdapter: FragmentPagerAdapter? = null\r\n    var homeViewModel: HomeViewModel? = null\r\n    var dealsViewModel: DealsViewModel? = null\r\n    var categoryViewModel: CategoryViewModel? = null\r\n    var firebaseAnalytics: FirebaseAnalytics? = null\r\n\r\n    private lateinit var contextMenuDialogFragment: ContextMenuDialogFragment\r\n\r\n    private lateinit var bottomNav: ExpandableBottomBar\r\n\r\n    var search_rvCountryStores: RecyclerView? = null\r\n\r\n    var appsList: ArrayList<List<String>>? = ArrayList()\r\n\r\n    val filterList: ArrayList<List<String>> = ArrayList()\r\n\r\n    var dialog: Dialog? = null\r\n\r\n    var allAppsAdapter: AllAppsAdapter? = null\r\n\r\n    lateinit var search: ImageView\r\n\r\n    private var searchTxt: String? = null\r\n\r\n    var firebaseRemoteConfig: FirebaseRemoteConfig? = null\r\n\r\n    override val bindingVariable: Int\r\n        get() = 0\r\n    override val layoutId: Int\r\n        get() = 0\r\n    var bool: Boolean = false\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n\r\n\r\n        if (Build.VERSION.SDK_INT >= 21) {\r\n            val window = this.window\r\n            window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS)\r\n            window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS)\r\n            window.statusBarColor = this.resources.getColor(R.color.colorPrimaryDark)\r\n        }\r\n\r\n\r\n\r\n        initViews()\r\n//        initToolbar()\r\n        initMenuFragment()\r\n\r\n\r\n        fancy(findViewById(R.id.search), \"Search Here !\")\r\n\r\n        fancy(findViewById(R.id.ivMenu), \"Menu items\")\r\n\r\n\r\n\r\n        Pref.initializeInstance(this)\r\n\r\n        firebaseRemoteConfig = FirebaseRemoteConfig.getInstance()\r\n\r\n        Log.d(\"TAG\", \"onCreate: currentTime \" + System.currentTimeMillis())\r\n\r\n        if (!Pref.instance!!.dataChangedDate.equals(firebaseRemoteConfig!!.getString(Constants().DATA_CHANGED_DATE))) {\r\n            Pref.instance!!.dataChanged = true\r\n            Pref.instance!!.dataChangedDate =\r\n                firebaseRemoteConfig!!.getString(Constants().DATA_CHANGED_DATE)\r\n            Log.d(\r\n                \"TAG\",\r\n                \"onCreate: dataChanged \" + Pref.instance!!.dataChanged + \" dataChangedDate \" + Pref.instance!!.dataChangedDate\r\n            )\r\n        } else {\r\n            Pref.instance!!.dataChanged = false\r\n            Log.d(\r\n                \"TAG\",\r\n                \"onCreate: dataChanged \" + Pref.instance!!.dataChanged + \" dataChangedDate \" + Pref.instance!!.dataChangedDate\r\n            )\r\n        }\r\n\r\n        dialog = Dialog(this)\r\n\r\n        ForceUpdateChecker().with(this)!!.onUpdateNeeded(this).check()\r\n\r\n        homeViewModel = ViewModelProvider(this).get(HomeViewModel::class.java)\r\n        dealsViewModel = ViewModelProvider(this).get(DealsViewModel::class.java)\r\n        categoryViewModel = ViewModelProvider(this).get(CategoryViewModel::class.java)\r\n\r\n\r\n        homeViewModel?.loadData()\r\n\r\n        homeViewModel!!.allAppsLiveData.observe(this, Observer { t ->\r\n            Log.d(\"TAG\", \"HomeFragment Live allAppsLiveData$t\")\r\n            appsList!!.clear()\r\n            if (t != null) {\r\n                t.getValues()?.let { appsList?.addAll(it) }\r\n            }\r\n        })\r\n\r\n        search.setOnClickListener {\r\n            onShowStores(appsList!!, it)\r\n        }\r\n//\r\n        viewPagerTab!!.addOnTabSelectedListener(object : TabLayout.OnTabSelectedListener {\r\n            override fun onTabSelected(tab: TabLayout.Tab) {\r\n                Log.d(\"TAG\", \"onTabSelected: \" + tab.position)\r\n                val bundleAppUsage = Bundle()\r\n                bundleAppUsage.putString(\"tab_click\", tab.text.toString())\r\n                onUpdateLogEvent(bundleAppUsage, \"app_usage\", false)\r\n            }\r\n\r\n            override fun onTabUnselected(tab: TabLayout.Tab) {}\r\n            override fun onTabReselected(tab: TabLayout.Tab) {}\r\n        })\r\n\r\n        setupViewPager()\r\n\r\n        val menu = bottomNav.menu\r\n\r\n        menu.select(R.id.id_home)\r\n//        viewPager!!.currentItem = 0\r\n\r\n        fancy(bottomNav.getChildAt(1), \"Category\")\r\n        fancy(bottomNav.getChildAt(2), \"Deals\")\r\n        fancy(bottomNav.getChildAt(3), \"bookmark\")\r\n\r\n\r\n\r\n        bottomNav.onItemSelectedListener = { view, menuItem, bool ->\r\n            when (menuItem.id) {\r\n                R.id.id_home -> {\r\n                    viewPager!!.currentItem = 0\r\n                }\r\n                R.id.id_category -> {\r\n                    viewPager!!.currentItem = 1\r\n                }\r\n                R.id.id_deals -> {\r\n                    viewPager!!.currentItem = 2\r\n                }\r\n                R.id.id_bookmark -> {\r\n                    viewPager!!.currentItem = 3\r\n                }\r\n            }\r\n        }\r\n\r\n        ivMenu.setOnClickListener {\r\n            showContextMenuDialogFragment()\r\n        }\r\n    }\r\n\r\n    private fun initViews() {\r\n        firebaseAnalytics = FirebaseAnalytics.getInstance(this)\r\n        bottomNav = findViewById(R.id.expandable_bottom_bar)\r\n        viewPager = findViewById(R.id.vpPager)\r\n        viewPagerTab = findViewById(R.id.view_pager_tab)\r\n        search = findViewById(R.id.search)\r\n\r\n    }\r\n\r\n    fun fancy(it: View, title: String) {\r\n        return FancyShowCaseView.Builder(this).focusOn(it).title(title).delay(50).showOnce(title)\r\n            .titleSize(14, 2)\r\n            .build()\r\n            .show()\r\n    }\r\n\r\n    private fun onShowStores(list: ArrayList<List<String>>, view: View) {\r\n        dialog!!.setContentView(R.layout.dialog_search)\r\n\r\n        fancy(view, \"Search Here !\")\r\n\r\n        dialog!!.window!!.setLayout(\r\n            WindowManager.LayoutParams.MATCH_PARENT,\r\n            WindowManager.LayoutParams.MATCH_PARENT\r\n        );\r\n\r\n        search_rvCountryStores = dialog!!.findViewById(R.id.search_rvCategoryStores)\r\n\r\n        setRecyclerView()\r\n\r\n        allAppsAdapter!!.setItems(list)\r\n\r\n        dialog!!.show()\r\n\r\n    }\r\n\r\n    private fun setRecyclerView() {\r\n        allAppsAdapter = AllAppsAdapter(applicationContext)\r\n        allAppsAdapter!!.setListener(this)\r\n        search_rvCountryStores.apply {\r\n            search_rvCountryStores?.layoutManager = GridLayoutManager(this@MainActivity, 3)\r\n            search_rvCountryStores?.adapter = allAppsAdapter\r\n\r\n            val appSearchView: android.widget.SearchView = dialog!!.findViewById(R.id.app_search)\r\n            filterList.clear()\r\n            filterList.addAll(appsList!!)\r\n\r\n\r\n            appSearchView.setOnQueryTextListener(object :\r\n                android.widget.SearchView.OnQueryTextListener {\r\n                override fun onQueryTextSubmit(query: String?): Boolean {\r\n                    searchTxt = query\r\n                    Log.d(\"QuerySearch\", searchTxt.toString())\r\n                    return false\r\n                }\r\n\r\n                override fun onQueryTextChange(newText: String?): Boolean {\r\n                    searchTxt = newText\r\n                    return false\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    private fun setupViewPager() {\r\n\r\n        fragmentPagerAdapter = AppPagerAdapter(supportFragmentManager)\r\n        viewPager!!.adapter = fragmentPagerAdapter\r\n        val limit =\r\n            if ((fragmentPagerAdapter as AppPagerAdapter).count > 1) (fragmentPagerAdapter as AppPagerAdapter).count - 1 else 1\r\n        viewPager!!.offscreenPageLimit = limit;\r\n        viewPager!!.currentItem = 0\r\n\r\n        viewPager!!.setSwipePagingEnabled(false)\r\n\r\n        viewPagerTab!!.setupWithViewPager(viewPager)\r\n\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        homeViewModel?.reset()\r\n        dealsViewModel?.reset()\r\n        categoryViewModel?.reset()\r\n        super.onDestroy()\r\n\r\n    }\r\n\r\n    override fun onUpdateNeeded(updateUrl: String?) {\r\n        val dialog = AlertDialog.Builder(this)\r\n            .setTitle(\"New version available\")\r\n            .setMessage(\"Please, update app to new version to continue shopping.\")\r\n            .setPositiveButton(\r\n                \"Update\"\r\n            ) { dialog, which -> redirectStore(updateUrl!!) }.setNegativeButton(\r\n                \"No, thanks\"\r\n            ) { dialog, which -> finish() }.create()\r\n        dialog.show()\r\n\r\n    }\r\n\r\n    private fun redirectStore(updateUrl: String) {\r\n        val intent = Intent(Intent.ACTION_VIEW, Uri.parse(updateUrl))\r\n        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\r\n        startActivity(intent)\r\n    }\r\n\r\n    fun onUpdateLogEvent(bundle: Bundle, eventName: String, isUrlVisited: Boolean) {\r\n        Log.d(\"TAG\", \"onUpdateLogEvent: \")\r\n        if (BuildConfig.DEBUG) {\r\n            return\r\n        } else {\r\n            if (isUrlVisited) {\r\n                firebaseAnalytics!!.logEvent(eventName, bundle)\r\n                firebaseAnalytics!!.logEvent(\"url_visited\", bundle)\r\n            } else\r\n                firebaseAnalytics!!.logEvent(eventName, bundle)\r\n        }\r\n    }\r\n\r\n    override fun onAllCardClick(item: List<String>) {\r\n        Log.d(\"TAG\", \"onAllCardClick: \" + item[1])\r\n\r\n        if (item[1] == \"Amazon\") {\r\n\r\n            if (bool) {\r\n                val browserIntent = Intent(Intent.ACTION_VIEW, Uri.parse(item[2]))\r\n                startActivity(browserIntent)\r\n            } else {\r\n                val intent: Intent = Intent(this, WebActivity::class.java)\r\n                intent.putExtra(\"title\", item[1])\r\n                intent.putExtra(\"url\", item[2])\r\n                intent.putExtra(\"app_icon\", item[3])\r\n                intent.putExtra(\"color\", item[4])\r\n                if (searchTxt != null) {\r\n                    intent.putExtra(\"search_url\", item[5] + \"$searchTxt\")\r\n                }\r\n\r\n                startActivity(intent)\r\n            }\r\n        } else {\r\n            val intent: Intent = Intent(this, WebActivity::class.java)\r\n            intent.putExtra(\"title\", item[1])\r\n            intent.putExtra(\"url\", item[2])\r\n            intent.putExtra(\"app_icon\", item[3])\r\n            intent.putExtra(\"color\", item[4])\r\n            if (searchTxt != null) {\r\n                intent.putExtra(\"search_url\", item[5] + \"$searchTxt\")\r\n            }\r\n\r\n            startActivity(intent)\r\n        }\r\n\r\n        val bundle = Bundle()\r\n        bundle.putString(\"title\", item[1])\r\n        bundle.putString(\"url\", item[2])\r\n\r\n        this.onUpdateLogEvent(bundle, \"all_apps_visited\", true)\r\n    }\r\n\r\n    private fun initMenuFragment() {\r\n        val menuParams = MenuParams(\r\n            actionBarSize = resources.getDimension(R.dimen.menu).toInt(),\r\n            menuObjects = getMenuObjects(),\r\n            isClosableOutside = true\r\n        )\r\n\r\n        contextMenuDialogFragment = ContextMenuDialogFragment.newInstance(menuParams).apply {\r\n            menuItemClickListener = { view, position ->\r\n                when (position) {\r\n                    1 -> {\r\n                        try {\r\n                            startActivity(\r\n                                Intent(\r\n                                    Intent.ACTION_VIEW,\r\n                                    Uri.parse(\"https://play.google.com/store/apps/dev?id=6823602592155636380\")\r\n                                )\r\n                            )\r\n                        } catch (e: ActivityNotFoundException) {\r\n                            startActivity(\r\n                                Intent(\r\n                                    Intent.ACTION_VIEW,\r\n                                    Uri.parse(\"https://play.google.com/store/apps/details?id=6823602592155636380\")\r\n                                )\r\n                            )\r\n                        }\r\n                    }\r\n                    2 -> {\r\n                        try {\r\n                            startActivity(\r\n                                Intent(\r\n                                    Intent.ACTION_VIEW,\r\n                                    Uri.parse(\"https://play.google.com/store/apps/details?id=shopping.grocery.medicine.online.deals.coupons.compare.buy\")\r\n                                )\r\n                            )\r\n                        } catch (e: ActivityNotFoundException) {\r\n                            startActivity(\r\n                                Intent(\r\n                                    Intent.ACTION_VIEW,\r\n                                    Uri.parse(\"https://play.google.com/store/apps/details?id=shopping.grocery.medicine.online.deals.coupons.compare.buy\")\r\n                                )\r\n                            )\r\n                        }\r\n                    }\r\n                    3 -> {\r\n                        val i = Intent(Intent.ACTION_SEND)\r\n                        i.type = \"message/rfc822\"\r\n                        i.putExtra(Intent.EXTRA_EMAIL, arrayOf(\"infinitywebapps@gmail.com\"))\r\n                        i.putExtra(\r\n                            Intent.EXTRA_SUBJECT,\r\n                            \"Feedback \" + resources.getString(R.string.app_name)\r\n                        )\r\n                        i.putExtra(Intent.EXTRA_TEXT, \"Feedback :: \")\r\n                        try {\r\n                            startActivity(Intent.createChooser(i, \"Send feedback...\"))\r\n                        } catch (ex: ActivityNotFoundException) {\r\n                            Toast.makeText(\r\n                                this@MainActivity,\r\n                                \"There are no email clients installed.\",\r\n                                Toast.LENGTH_SHORT\r\n                            ).show()\r\n                        }\r\n                    }\r\n                    4 -> {\r\n                        val intent = Intent(Intent.ACTION_SEND)\r\n                        /*This will be the actual content you wish you share.*/\r\n                        /*This will be the actual content you wish you share.*/\r\n                        val shareBody = \"Use this \"\r\n                        /*The type of the content is text, obviously.*/\r\n                        /*The type of the content is text, obviously.*/intent.type = \"text/plain\"\r\n                        /*Applying information Subject and Body.*/\r\n                        /*Applying information Subject and Body.*/\r\n                        intent.putExtra(Intent.EXTRA_TEXT, shareBody)\r\n                        /*Fire!*/\r\n                        /*Fire!*/startActivity(\r\n                            Intent.createChooser(\r\n                                intent,\r\n                                \"Share via\"\r\n                            )\r\n                        )\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private fun getMenuObjects() = mutableListOf<MenuObject>().apply {\r\n        val close = MenuObject().apply {\r\n            setResourceValue(R.drawable.ic_baseline_close)\r\n            setBgColorValue(resources.getColor(R.color.colorPrimary))\r\n        }\r\n        val moreApps = MenuObject(\"More apps\").apply {\r\n            setResourceValue(R.drawable.ic_baseline_store)\r\n            setBgColorValue(resources.getColor(R.color.colorPrimary))\r\n        }\r\n        val rateUs = MenuObject(\"Rate Us\").apply {\r\n            setResourceValue(R.drawable.ic_baseline_star_rate)\r\n            setBgColorValue(resources.getColor(R.color.colorPrimary))\r\n        }\r\n        val feedback = MenuObject(\"Feedback\").apply {\r\n            setResourceValue(R.drawable.ic_baseline_feedback)\r\n            setBgColorValue(resources.getColor(R.color.colorPrimary))\r\n        }\r\n        val share = MenuObject(\"Share\").apply {\r\n            setResourceValue(R.drawable.ic_share)\r\n            setBgColorValue(resources.getColor(R.color.colorPrimary))\r\n        }\r\n\r\n        add(close)\r\n        add(moreApps)\r\n        add(rateUs)\r\n        add(feedback)\r\n        add(share)\r\n    }\r\n\r\n    private fun showContextMenuDialogFragment() {\r\n        Log.d(\"TAG\", \"showContextMenuDialogFragment: \")\r\n        if (supportFragmentManager.findFragmentByTag(ContextMenuDialogFragment.TAG) == null) {\r\n            contextMenuDialogFragment.show(supportFragmentManager, ContextMenuDialogFragment.TAG)\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/shopping/grocery/medicine/online/deals/coupons/compare/buy/view/MainActivity.kt	(revision 5f62c1754399c0535b72bbccd3421483e60dae99)
+++ app/src/main/java/shopping/grocery/medicine/online/deals/coupons/compare/buy/view/MainActivity.kt	(date 1623078271410)
@@ -1,9 +1,11 @@
 package shopping.grocery.medicine.online.deals.coupons.compare.buy.view
 
+import android.annotation.SuppressLint
 import android.app.Dialog
 import android.content.ActivityNotFoundException
 import android.content.Intent
 import android.net.Uri
+import android.os.AsyncTask
 import android.os.Build
 import android.os.Bundle
 import android.util.Log
@@ -17,6 +19,9 @@
 import androidx.lifecycle.ViewModelProvider
 import androidx.recyclerview.widget.GridLayoutManager
 import androidx.recyclerview.widget.RecyclerView
+import com.google.android.gms.ads.identifier.AdvertisingIdClient
+import com.google.android.gms.common.GooglePlayServicesNotAvailableException
+import com.google.android.gms.common.GooglePlayServicesRepairableException
 import com.google.android.material.tabs.TabLayout
 import com.google.firebase.analytics.FirebaseAnalytics
 import com.google.firebase.remoteconfig.BuildConfig
@@ -40,9 +45,10 @@
 import shopping.grocery.medicine.online.deals.coupons.compare.buy.viewmodel.DealsViewModel
 import shopping.grocery.medicine.online.deals.coupons.compare.buy.viewmodel.HomeViewModel
 import shopping.grocery.medicine.online.deals.coupons.compare.buy.viewpager.AppPagerAdapter
+import java.io.IOException
 
 
-class MainActivity : BaseActivity(), AllAppsItemClickListener<List<String>>,
+open class MainActivity : BaseActivity(), AllAppsItemClickListener<List<String>>,
     ForceUpdateChecker.OnUpdateNeededListener {
 
     var viewPager: CustomViewPager? = null
@@ -79,10 +85,38 @@
         get() = 0
     var bool: Boolean = false
 
+    @SuppressLint("StaticFieldLeak")
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
         setContentView(R.layout.activity_main)
 
+//        val task: AsyncTask<Void?, Void?, String?> = object : AsyncTask<Void?, Void?, String?>() {
+//            override fun onPostExecute(advertId: String?) {
+//                Log.d("ADvert", advertId.toString())
+//            }
+//
+//            override fun doInBackground(vararg params: Void?): String? {
+//                var idInfo: AdvertisingIdClient.Info? = null
+//                try {
+//                    idInfo = AdvertisingIdClient.getAdvertisingIdInfo(applicationContext)
+//                } catch (e: GooglePlayServicesNotAvailableException) {
+//                    e.printStackTrace()
+//                } catch (e: GooglePlayServicesRepairableException) {
+//                    e.printStackTrace()
+//                } catch (e: IOException) {
+//                    e.printStackTrace()
+//                }
+//                var advertId: String? = null
+//                try {
+//                    advertId = idInfo!!.id
+//                } catch (e: NullPointerException) {
+//                    e.printStackTrace()
+//                }
+//                return advertId
+//            }
+//        }
+//        task.execute()
+
 
         if (Build.VERSION.SDK_INT >= 21) {
             val window = this.window
Index: .idea/shelf/Uncommitted_changes_before_Update_at_31_05_21__5_35_PM__Default_Changelist_.xml
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_31_05_21__5_35_PM__Default_Changelist_.xml	(revision 5f62c1754399c0535b72bbccd3421483e60dae99)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_31_05_21__5_35_PM__Default_Changelist_.xml	(revision 5f62c1754399c0535b72bbccd3421483e60dae99)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_31_05_21,_5_35_PM_[Default_Changelist]" date="1622462759539" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_31_05_21,_5_35_PM_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 31/05/21, 5:35 PM [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_31_05_21,_5_35_PM_[Default_Changelist]/shelved.patch
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_31_05_21,_5_35_PM_[Default_Changelist]/shelved.patch	(revision 5f62c1754399c0535b72bbccd3421483e60dae99)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_31_05_21,_5_35_PM_[Default_Changelist]/shelved.patch	(revision 5f62c1754399c0535b72bbccd3421483e60dae99)
@@ -1,39 +0,0 @@
-Index: app/src/main/java/shopping/grocery/medicine/online/deals/coupons/compare/buy/utils/helper.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package shopping.grocery.medicine.online.deals.coupons.compare.buy.utils\n\nimport android.content.Context\nimport android.graphics.Color\nimport android.widget.Toast\n\nclass helper {\n\n    fun Context.makeToast(message: String) {\n        val toast = Toast.makeText(this, message, Toast.LENGTH_SHORT)\n        toast.view.setBackgroundColor(Color.parseColor(\"#53b9fb\"))\n        toast.show()\n    }\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/shopping/grocery/medicine/online/deals/coupons/compare/buy/utils/helper.kt	(revision 9439a6ce5d78092b1c5c222c165cf639b0cfde8a)
-+++ app/src/main/java/shopping/grocery/medicine/online/deals/coupons/compare/buy/utils/helper.kt	(date 1622452848611)
-@@ -8,7 +8,7 @@
- 
-     fun Context.makeToast(message: String) {
-         val toast = Toast.makeText(this, message, Toast.LENGTH_SHORT)
--        toast.view.setBackgroundColor(Color.parseColor("#53b9fb"))
-+        toast.view!!.setBackgroundColor(Color.parseColor("#53b9fb"))
-         toast.show()
-     }
- }
-\ No newline at end of file
-Index: app/src/main/java/shopping/grocery/medicine/online/deals/coupons/compare/buy/view/MainActivity.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package shopping.grocery.medicine.online.deals.coupons.compare.buy.view\n\nimport android.app.Dialog\nimport android.content.Intent\nimport android.net.Uri\nimport android.os.Bundle\nimport android.text.Editable\nimport android.text.TextWatcher\nimport android.util.Log\nimport android.view.MenuItem\nimport android.view.View\nimport android.view.WindowManager\nimport android.widget.EditText\nimport android.widget.ImageView\nimport androidx.appcompat.app.AlertDialog\nimport androidx.fragment.app.FragmentPagerAdapter\nimport androidx.lifecycle.Observer\nimport androidx.lifecycle.ViewModelProvider\nimport androidx.recyclerview.widget.GridLayoutManager\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.viewpager.widget.ViewPager\nimport com.google.android.material.tabs.TabLayout\nimport com.google.firebase.analytics.FirebaseAnalytics\nimport com.google.firebase.remoteconfig.BuildConfig\nimport github.com.st235.lib_expandablebottombar.ExpandableBottomBar\nimport kotlinx.android.synthetic.main.activity_main.*\nimport me.toptas.fancyshowcase.FancyShowCaseView\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.R\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.base.BaseActivity\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.utils.CustomViewPager\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.utils.ForceUpdateChecker\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.view.adapter.home.AllAppsAdapter\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.view.fragment.CategoryFragment\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.view.fragment.DealFragment\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.view.fragment.FragmentHome\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.view.listener.AllAppsItemClickListener\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.viewmodel.CategoryViewModel\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.viewmodel.DealsViewModel\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.viewmodel.GlobalViewModel\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.viewmodel.HomeViewModel\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.viewpager.AppPagerAdapter\n\n\nclass MainActivity : BaseActivity(), AllAppsItemClickListener<List<String>>,\n    ForceUpdateChecker.OnUpdateNeededListener {\n\n    var viewPager: CustomViewPager? = null\n    var viewPagerTab: TabLayout? = null\n    var fragmentPagerAdapter: FragmentPagerAdapter? = null\n    var homeViewModel: HomeViewModel? = null\n    var globalViewModel: GlobalViewModel? = null\n    var dealsViewModel: DealsViewModel? = null\n    var categoryViewModel: CategoryViewModel? = null\n    var firebaseAnalytics: FirebaseAnalytics? = null\n\n    private lateinit var bottomNav: ExpandableBottomBar\n\n\n    private  val prevMenuItem : MenuItem ?= null\n\n    var search_rvCountryStores: RecyclerView? = null\n\n    var appsList: ArrayList<List<String>>? = ArrayList()\n\n    val filterList: ArrayList<List<String>> = ArrayList()\n\n    var dialog: Dialog? = null\n\n    var allAppsAdapter: AllAppsAdapter? = null\n\n    lateinit var search: ImageView\n\n    override val bindingVariable: Int\n        get() = 0\n    override val layoutId: Int\n        get() = 0\n    var bool: Boolean = false\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        initViews()\n        dialog = Dialog(this)\n\n       setupViewPager()\n\n        ForceUpdateChecker().with(this)!!.onUpdateNeeded(this).check()\n\n        homeViewModel = ViewModelProvider(this).get(HomeViewModel::class.java)\n        dealsViewModel = ViewModelProvider(this).get(DealsViewModel::class.java)\n        categoryViewModel = ViewModelProvider(this).get(CategoryViewModel::class.java)\n        globalViewModel = ViewModelProvider(this).get(GlobalViewModel::class.java)\n\n\n        homeViewModel?.loadData()\n\n        homeViewModel!!.allAppsLiveData.observe(this, Observer { t ->\n            Log.d(\"TAG\", \"HomeFragment Live allAppsLiveData$t\")\n            appsList!!.clear()\n            if (t != null) {\n                appsList?.addAll(t)\n            }\n        })\n\n        search.setOnClickListener {\n            onShowStores(appsList!!)\n        }\n\n//        viewPagerTab!!.addOnTabSelectedListener(object : OnTabSelectedListener {\n//            override fun onTabSelected(tab: TabLayout.Tab) {\n//                Log.d(\"TAG\", \"onTabSelected: \" + tab.position)\n//                val bundleAppUsage = Bundle()\n//                bundleAppUsage.putString(\"tab_click\", tab.text.toString())\n//                onUpdateLogEvent(bundleAppUsage, \"app_usage\", false)\n//            }\n//\n//            override fun onTabUnselected(tab: TabLayout.Tab) {}\n//            override fun onTabReselected(tab: TabLayout.Tab) {}\n//        })\n\n        val menu = bottomNav.menu\n\n        menu.select(R.id.id_home)\n        supportFragmentManager.beginTransaction().replace(R.id.frame, FragmentHome())\n            .commit()\n        viewPager!!.currentItem = 1\n\n\n        bottomNav.onItemSelectedListener = { view, menuItem, bool ->\n            when (menuItem.id) {\n                R.id.id_home -> {\n\n                    viewPager!!.currentItem = 1\n                    fancy(view, \"Home\")\n                    supportFragmentManager.beginTransaction().replace(R.id.frame, FragmentHome())\n                        .commit()\n\n                }\n                R.id.id_category -> {\n\n                    viewPager!!.currentItem = 2\n                    fancy(view, \"Category\")\n                    supportFragmentManager.beginTransaction()\n                        .replace(R.id.frame, CategoryFragment())\n                        .commit()\n                }\n                R.id.id_deals -> {\n\n                    viewPager!!.currentItem = 3\n                    fancy(view, \"Deals\")\n                    supportFragmentManager.beginTransaction()\n                        .replace(R.id.frame, DealFragment())\n                        .commit()\n                }\n                R.id.id_bookmark -> {\n\n                    viewPager!!.currentItem = 4\n                    fancy(view, \"Deals\")\n                    supportFragmentManager.beginTransaction()\n                        .replace(R.id.frame, DealFragment())\n                        .commit()\n                }\n            }\n        }\n    }\n\n    private fun initViews() {\n        firebaseAnalytics = FirebaseAnalytics.getInstance(this)\n        bottomNav = findViewById(R.id.expandable_bottom_bar)\n        viewPager = findViewById(R.id.frame)\n//        viewPagerTab = findViewById(R.id.view_pager_tab)\n        search = findViewById(R.id.search)\n    }\n\n    private fun fancy(it: View, title: String) {\n        return FancyShowCaseView.Builder(this).focusOn(it).title(title).delay(50).build()\n            .show()\n    }\n\n    private fun onShowStores(list: ArrayList<List<String>>) {\n        dialog!!.setContentView(R.layout.dialog_search)\n\n        dialog!!.window!!.setLayout(\n            WindowManager.LayoutParams.MATCH_PARENT,\n            WindowManager.LayoutParams.MATCH_PARENT\n        );\n\n        search_rvCountryStores = dialog!!.findViewById(R.id.search_rvCategoryStores)\n\n        setRecyclerView()\n\n        allAppsAdapter!!.setItems(list)\n\n        dialog!!.show()\n\n    }\n\n    private fun setRecyclerView() {\n        allAppsAdapter = AllAppsAdapter(applicationContext)\n        allAppsAdapter!!.setListener(this)\n        search_rvCountryStores.apply {\n            search_rvCountryStores?.layoutManager = GridLayoutManager(this@MainActivity, 3)\n            search_rvCountryStores?.adapter = allAppsAdapter\n\n            val appSearchView: EditText = dialog!!.findViewById(R.id.app_search)\n            filterList.clear()\n            filterList.addAll(appsList!!)\n\n            appSearchView.addTextChangedListener(textwatcher)\n        }\n    }\n\n    private val textwatcher = object : TextWatcher {\n\n\n        override fun beforeTextChanged(\n            charSequence: CharSequence?,\n            start: Int,\n            count: Int,\n            after: Int\n        ) {\n        }\n\n        override fun onTextChanged(\n            charSequence: CharSequence?,\n            start: Int,\n            before: Int,\n            count: Int\n        ) {\n\n            Log.d(\"Filter\", filterList.toString())\n\n            val searchChar = charSequence.toString().toLowerCase()\n            Log.d(\"filterSea\", searchChar)\n\n            val itemsModal = ArrayList<List<String>>()\n\n            for (item in filterList) {\n                if (item[1].toLowerCase().contains(searchChar)) {\n                    Log.d(\"filterdone\", item[1])\n                    Log.d(\"filterChar\", searchChar)\n                    itemsModal.add(item)\n                }\n            }\n\n            appsList!!.clear()\n            appsList!!.addAll(itemsModal)\n            Log.d(\"filterList\", itemsModal.toString())\n            allAppsAdapter!!.setItems(appsList)\n            allAppsAdapter!!.notifyDataSetChanged()\n        }\n\n        override fun afterTextChanged(s: Editable?) {\n        }\n    }\n\n    private fun setupViewPager() {\n        fragmentPagerAdapter = AppPagerAdapter(supportFragmentManager)\n        viewPager!!.adapter = fragmentPagerAdapter\n        val limit =\n            if ((fragmentPagerAdapter as AppPagerAdapter).count > 1) (fragmentPagerAdapter as AppPagerAdapter).count - 1 else 1\n        viewPager!!.offscreenPageLimit = limit;\n        viewPager!!.currentItem = 1;\n\n        viewPager!!.setSwipePagingEnabled(false)\n\n//        viewPagerTab!!.setupWithViewPager(viewPager)\n\n    }\n\n    override fun onDestroy() {\n        homeViewModel?.reset()\n        globalViewModel?.reset()\n        dealsViewModel?.reset()\n        categoryViewModel?.reset()\n        super.onDestroy()\n\n    }\n\n    override fun onUpdateNeeded(updateUrl: String?) {\n        val dialog = AlertDialog.Builder(this)\n            .setTitle(\"New version available\")\n            .setMessage(\"Please, update app to new version to continue shopping.\")\n            .setPositiveButton(\n                \"Update\"\n            ) { dialog, which -> redirectStore(updateUrl!!) }.setNegativeButton(\n                \"No, thanks\"\n            ) { dialog, which -> finish() }.create()\n        dialog.show()\n\n    }\n\n    private fun redirectStore(updateUrl: String) {\n        val intent = Intent(Intent.ACTION_VIEW, Uri.parse(updateUrl))\n        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\n        startActivity(intent)\n    }\n\n    fun onUpdateLogEvent(bundle: Bundle, eventName: String, isUrlVisited: Boolean) {\n        Log.d(\"TAG\", \"onUpdateLogEvent: \")\n        if (BuildConfig.DEBUG) {\n            return\n        } else {\n            if (isUrlVisited) {\n                firebaseAnalytics!!.logEvent(eventName, bundle)\n                firebaseAnalytics!!.logEvent(\"url_visited\", bundle)\n            } else\n                firebaseAnalytics!!.logEvent(eventName, bundle)\n        }\n    }\n\n    override fun onAllCardClick(item: List<String>) {\n        Log.d(\"TAG\", \"onAllCardClick: \" + item[1])\n\n        if (item[1] == \"Amazon\") {\n\n            if (bool) {\n                val browserIntent = Intent(Intent.ACTION_VIEW, Uri.parse(item[2]))\n                startActivity(browserIntent)\n            } else {\n                val intent: Intent = Intent(this, WebActivity::class.java)\n                intent.putExtra(\"title\", item[1])\n                intent.putExtra(\"url\", item[2])\n                intent.putExtra(\"app_icon\", item[3])\n\n                startActivity(intent)\n            }\n        } else {\n            val intent: Intent = Intent(this, WebActivity::class.java)\n            intent.putExtra(\"title\", item[1])\n            intent.putExtra(\"url\", item[2])\n            intent.putExtra(\"app_icon\", item[3])\n\n            startActivity(intent)\n        }\n\n        val bundle = Bundle()\n        bundle.putString(\"title\", item[1])\n        bundle.putString(\"url\", item[2])\n\n        this.onUpdateLogEvent(bundle, \"all_apps_visited\", true)\n    }\n\n\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/shopping/grocery/medicine/online/deals/coupons/compare/buy/view/MainActivity.kt	(revision 9439a6ce5d78092b1c5c222c165cf639b0cfde8a)
-+++ app/src/main/java/shopping/grocery/medicine/online/deals/coupons/compare/buy/view/MainActivity.kt	(date 1622453095497)
-@@ -260,8 +260,8 @@
-         viewPager!!.adapter = fragmentPagerAdapter
-         val limit =
-             if ((fragmentPagerAdapter as AppPagerAdapter).count > 1) (fragmentPagerAdapter as AppPagerAdapter).count - 1 else 1
--        viewPager!!.offscreenPageLimit = limit;
--        viewPager!!.currentItem = 1;
-+        viewPager!!.offscreenPageLimit = limit
-+        viewPager!!.currentItem = 1
- 
-         viewPager!!.setSwipePagingEnabled(false)
- 
