Index: app/src/main/java/shopping/grocery/medicine/online/deals/coupons/compare/buy/utils/helper.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package shopping.grocery.medicine.online.deals.coupons.compare.buy.utils\n\nimport android.content.Context\nimport android.graphics.Color\nimport android.widget.Toast\n\nclass helper {\n\n    fun Context.makeToast(message: String) {\n        val toast = Toast.makeText(this, message, Toast.LENGTH_SHORT)\n        toast.view.setBackgroundColor(Color.parseColor(\"#53b9fb\"))\n        toast.show()\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/shopping/grocery/medicine/online/deals/coupons/compare/buy/utils/helper.kt	(revision 9439a6ce5d78092b1c5c222c165cf639b0cfde8a)
+++ app/src/main/java/shopping/grocery/medicine/online/deals/coupons/compare/buy/utils/helper.kt	(date 1622452848611)
@@ -8,7 +8,7 @@
 
     fun Context.makeToast(message: String) {
         val toast = Toast.makeText(this, message, Toast.LENGTH_SHORT)
-        toast.view.setBackgroundColor(Color.parseColor("#53b9fb"))
+        toast.view!!.setBackgroundColor(Color.parseColor("#53b9fb"))
         toast.show()
     }
 }
\ No newline at end of file
Index: app/src/main/java/shopping/grocery/medicine/online/deals/coupons/compare/buy/view/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package shopping.grocery.medicine.online.deals.coupons.compare.buy.view\n\nimport android.app.Dialog\nimport android.content.Intent\nimport android.net.Uri\nimport android.os.Bundle\nimport android.text.Editable\nimport android.text.TextWatcher\nimport android.util.Log\nimport android.view.MenuItem\nimport android.view.View\nimport android.view.WindowManager\nimport android.widget.EditText\nimport android.widget.ImageView\nimport androidx.appcompat.app.AlertDialog\nimport androidx.fragment.app.FragmentPagerAdapter\nimport androidx.lifecycle.Observer\nimport androidx.lifecycle.ViewModelProvider\nimport androidx.recyclerview.widget.GridLayoutManager\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.viewpager.widget.ViewPager\nimport com.google.android.material.tabs.TabLayout\nimport com.google.firebase.analytics.FirebaseAnalytics\nimport com.google.firebase.remoteconfig.BuildConfig\nimport github.com.st235.lib_expandablebottombar.ExpandableBottomBar\nimport kotlinx.android.synthetic.main.activity_main.*\nimport me.toptas.fancyshowcase.FancyShowCaseView\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.R\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.base.BaseActivity\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.utils.CustomViewPager\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.utils.ForceUpdateChecker\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.view.adapter.home.AllAppsAdapter\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.view.fragment.CategoryFragment\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.view.fragment.DealFragment\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.view.fragment.FragmentHome\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.view.listener.AllAppsItemClickListener\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.viewmodel.CategoryViewModel\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.viewmodel.DealsViewModel\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.viewmodel.GlobalViewModel\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.viewmodel.HomeViewModel\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.viewpager.AppPagerAdapter\n\n\nclass MainActivity : BaseActivity(), AllAppsItemClickListener<List<String>>,\n    ForceUpdateChecker.OnUpdateNeededListener {\n\n    var viewPager: CustomViewPager? = null\n    var viewPagerTab: TabLayout? = null\n    var fragmentPagerAdapter: FragmentPagerAdapter? = null\n    var homeViewModel: HomeViewModel? = null\n    var globalViewModel: GlobalViewModel? = null\n    var dealsViewModel: DealsViewModel? = null\n    var categoryViewModel: CategoryViewModel? = null\n    var firebaseAnalytics: FirebaseAnalytics? = null\n\n    private lateinit var bottomNav: ExpandableBottomBar\n\n\n    private  val prevMenuItem : MenuItem ?= null\n\n    var search_rvCountryStores: RecyclerView? = null\n\n    var appsList: ArrayList<List<String>>? = ArrayList()\n\n    val filterList: ArrayList<List<String>> = ArrayList()\n\n    var dialog: Dialog? = null\n\n    var allAppsAdapter: AllAppsAdapter? = null\n\n    lateinit var search: ImageView\n\n    override val bindingVariable: Int\n        get() = 0\n    override val layoutId: Int\n        get() = 0\n    var bool: Boolean = false\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        initViews()\n        dialog = Dialog(this)\n\n       setupViewPager()\n\n        ForceUpdateChecker().with(this)!!.onUpdateNeeded(this).check()\n\n        homeViewModel = ViewModelProvider(this).get(HomeViewModel::class.java)\n        dealsViewModel = ViewModelProvider(this).get(DealsViewModel::class.java)\n        categoryViewModel = ViewModelProvider(this).get(CategoryViewModel::class.java)\n        globalViewModel = ViewModelProvider(this).get(GlobalViewModel::class.java)\n\n\n        homeViewModel?.loadData()\n\n        homeViewModel!!.allAppsLiveData.observe(this, Observer { t ->\n            Log.d(\"TAG\", \"HomeFragment Live allAppsLiveData$t\")\n            appsList!!.clear()\n            if (t != null) {\n                appsList?.addAll(t)\n            }\n        })\n\n        search.setOnClickListener {\n            onShowStores(appsList!!)\n        }\n\n//        viewPagerTab!!.addOnTabSelectedListener(object : OnTabSelectedListener {\n//            override fun onTabSelected(tab: TabLayout.Tab) {\n//                Log.d(\"TAG\", \"onTabSelected: \" + tab.position)\n//                val bundleAppUsage = Bundle()\n//                bundleAppUsage.putString(\"tab_click\", tab.text.toString())\n//                onUpdateLogEvent(bundleAppUsage, \"app_usage\", false)\n//            }\n//\n//            override fun onTabUnselected(tab: TabLayout.Tab) {}\n//            override fun onTabReselected(tab: TabLayout.Tab) {}\n//        })\n\n        val menu = bottomNav.menu\n\n        menu.select(R.id.id_home)\n        supportFragmentManager.beginTransaction().replace(R.id.frame, FragmentHome())\n            .commit()\n        viewPager!!.currentItem = 1\n\n\n        bottomNav.onItemSelectedListener = { view, menuItem, bool ->\n            when (menuItem.id) {\n                R.id.id_home -> {\n\n                    viewPager!!.currentItem = 1\n                    fancy(view, \"Home\")\n                    supportFragmentManager.beginTransaction().replace(R.id.frame, FragmentHome())\n                        .commit()\n\n                }\n                R.id.id_category -> {\n\n                    viewPager!!.currentItem = 2\n                    fancy(view, \"Category\")\n                    supportFragmentManager.beginTransaction()\n                        .replace(R.id.frame, CategoryFragment())\n                        .commit()\n                }\n                R.id.id_deals -> {\n\n                    viewPager!!.currentItem = 3\n                    fancy(view, \"Deals\")\n                    supportFragmentManager.beginTransaction()\n                        .replace(R.id.frame, DealFragment())\n                        .commit()\n                }\n                R.id.id_bookmark -> {\n\n                    viewPager!!.currentItem = 4\n                    fancy(view, \"Deals\")\n                    supportFragmentManager.beginTransaction()\n                        .replace(R.id.frame, DealFragment())\n                        .commit()\n                }\n            }\n        }\n    }\n\n    private fun initViews() {\n        firebaseAnalytics = FirebaseAnalytics.getInstance(this)\n        bottomNav = findViewById(R.id.expandable_bottom_bar)\n        viewPager = findViewById(R.id.frame)\n//        viewPagerTab = findViewById(R.id.view_pager_tab)\n        search = findViewById(R.id.search)\n    }\n\n    private fun fancy(it: View, title: String) {\n        return FancyShowCaseView.Builder(this).focusOn(it).title(title).delay(50).build()\n            .show()\n    }\n\n    private fun onShowStores(list: ArrayList<List<String>>) {\n        dialog!!.setContentView(R.layout.dialog_search)\n\n        dialog!!.window!!.setLayout(\n            WindowManager.LayoutParams.MATCH_PARENT,\n            WindowManager.LayoutParams.MATCH_PARENT\n        );\n\n        search_rvCountryStores = dialog!!.findViewById(R.id.search_rvCategoryStores)\n\n        setRecyclerView()\n\n        allAppsAdapter!!.setItems(list)\n\n        dialog!!.show()\n\n    }\n\n    private fun setRecyclerView() {\n        allAppsAdapter = AllAppsAdapter(applicationContext)\n        allAppsAdapter!!.setListener(this)\n        search_rvCountryStores.apply {\n            search_rvCountryStores?.layoutManager = GridLayoutManager(this@MainActivity, 3)\n            search_rvCountryStores?.adapter = allAppsAdapter\n\n            val appSearchView: EditText = dialog!!.findViewById(R.id.app_search)\n            filterList.clear()\n            filterList.addAll(appsList!!)\n\n            appSearchView.addTextChangedListener(textwatcher)\n        }\n    }\n\n    private val textwatcher = object : TextWatcher {\n\n\n        override fun beforeTextChanged(\n            charSequence: CharSequence?,\n            start: Int,\n            count: Int,\n            after: Int\n        ) {\n        }\n\n        override fun onTextChanged(\n            charSequence: CharSequence?,\n            start: Int,\n            before: Int,\n            count: Int\n        ) {\n\n            Log.d(\"Filter\", filterList.toString())\n\n            val searchChar = charSequence.toString().toLowerCase()\n            Log.d(\"filterSea\", searchChar)\n\n            val itemsModal = ArrayList<List<String>>()\n\n            for (item in filterList) {\n                if (item[1].toLowerCase().contains(searchChar)) {\n                    Log.d(\"filterdone\", item[1])\n                    Log.d(\"filterChar\", searchChar)\n                    itemsModal.add(item)\n                }\n            }\n\n            appsList!!.clear()\n            appsList!!.addAll(itemsModal)\n            Log.d(\"filterList\", itemsModal.toString())\n            allAppsAdapter!!.setItems(appsList)\n            allAppsAdapter!!.notifyDataSetChanged()\n        }\n\n        override fun afterTextChanged(s: Editable?) {\n        }\n    }\n\n    private fun setupViewPager() {\n        fragmentPagerAdapter = AppPagerAdapter(supportFragmentManager)\n        viewPager!!.adapter = fragmentPagerAdapter\n        val limit =\n            if ((fragmentPagerAdapter as AppPagerAdapter).count > 1) (fragmentPagerAdapter as AppPagerAdapter).count - 1 else 1\n        viewPager!!.offscreenPageLimit = limit;\n        viewPager!!.currentItem = 1;\n\n        viewPager!!.setSwipePagingEnabled(false)\n\n//        viewPagerTab!!.setupWithViewPager(viewPager)\n\n    }\n\n    override fun onDestroy() {\n        homeViewModel?.reset()\n        globalViewModel?.reset()\n        dealsViewModel?.reset()\n        categoryViewModel?.reset()\n        super.onDestroy()\n\n    }\n\n    override fun onUpdateNeeded(updateUrl: String?) {\n        val dialog = AlertDialog.Builder(this)\n            .setTitle(\"New version available\")\n            .setMessage(\"Please, update app to new version to continue shopping.\")\n            .setPositiveButton(\n                \"Update\"\n            ) { dialog, which -> redirectStore(updateUrl!!) }.setNegativeButton(\n                \"No, thanks\"\n            ) { dialog, which -> finish() }.create()\n        dialog.show()\n\n    }\n\n    private fun redirectStore(updateUrl: String) {\n        val intent = Intent(Intent.ACTION_VIEW, Uri.parse(updateUrl))\n        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\n        startActivity(intent)\n    }\n\n    fun onUpdateLogEvent(bundle: Bundle, eventName: String, isUrlVisited: Boolean) {\n        Log.d(\"TAG\", \"onUpdateLogEvent: \")\n        if (BuildConfig.DEBUG) {\n            return\n        } else {\n            if (isUrlVisited) {\n                firebaseAnalytics!!.logEvent(eventName, bundle)\n                firebaseAnalytics!!.logEvent(\"url_visited\", bundle)\n            } else\n                firebaseAnalytics!!.logEvent(eventName, bundle)\n        }\n    }\n\n    override fun onAllCardClick(item: List<String>) {\n        Log.d(\"TAG\", \"onAllCardClick: \" + item[1])\n\n        if (item[1] == \"Amazon\") {\n\n            if (bool) {\n                val browserIntent = Intent(Intent.ACTION_VIEW, Uri.parse(item[2]))\n                startActivity(browserIntent)\n            } else {\n                val intent: Intent = Intent(this, WebActivity::class.java)\n                intent.putExtra(\"title\", item[1])\n                intent.putExtra(\"url\", item[2])\n                intent.putExtra(\"app_icon\", item[3])\n\n                startActivity(intent)\n            }\n        } else {\n            val intent: Intent = Intent(this, WebActivity::class.java)\n            intent.putExtra(\"title\", item[1])\n            intent.putExtra(\"url\", item[2])\n            intent.putExtra(\"app_icon\", item[3])\n\n            startActivity(intent)\n        }\n\n        val bundle = Bundle()\n        bundle.putString(\"title\", item[1])\n        bundle.putString(\"url\", item[2])\n\n        this.onUpdateLogEvent(bundle, \"all_apps_visited\", true)\n    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/shopping/grocery/medicine/online/deals/coupons/compare/buy/view/MainActivity.kt	(revision 9439a6ce5d78092b1c5c222c165cf639b0cfde8a)
+++ app/src/main/java/shopping/grocery/medicine/online/deals/coupons/compare/buy/view/MainActivity.kt	(date 1622453095497)
@@ -260,8 +260,8 @@
         viewPager!!.adapter = fragmentPagerAdapter
         val limit =
             if ((fragmentPagerAdapter as AppPagerAdapter).count > 1) (fragmentPagerAdapter as AppPagerAdapter).count - 1 else 1
-        viewPager!!.offscreenPageLimit = limit;
-        viewPager!!.currentItem = 1;
+        viewPager!!.offscreenPageLimit = limit
+        viewPager!!.currentItem = 1
 
         viewPager!!.setSwipePagingEnabled(false)
 
