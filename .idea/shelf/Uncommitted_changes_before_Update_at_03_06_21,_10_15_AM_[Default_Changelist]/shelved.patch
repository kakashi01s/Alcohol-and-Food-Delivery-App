Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    package=\"shopping.grocery.medicine.online.deals.coupons.compare.buy\">\n\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\"/>\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n<!--    <uses-permission android:name=\"android.permission.SYSTEM_ALERT_WINDOW\"/>-->\n\n    <uses-permission android:name=\"android.permission.WAKE_LOCK\" />\n\n    <application\n        android:name=\".Singleton\"\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\"\n        android:networkSecurityConfig=\"@xml/network_security_config\"\n        android:usesCleartextTraffic=\"true\"\n        tools:targetApi=\"m\">\n        <activity android:name=\".view.SplashActivity\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n        <activity android:name=\".view.WebActivity\"\n            android:screenOrientation=\"portrait\"\n            android:windowSoftInputMode=\"adjustPan\"/>\n        <activity android:name=\".view.MainActivity\"/>\n\n        <uses-library\n            android:name=\"org.apache.http.legacy\"\n            android:required=\"false\" />\n\n        <meta-data\n            android:name=\"com.google.android.gms.ads.APPLICATION_ID\"\n            android:value=\"ca-app-pub-9928966600221551~4216728448\" />\n\n        <meta-data android:name=\"com.facebook.sdk.ApplicationId\"\n            android:value=\"@string/facebook_app_id\"/>\n        <meta-data android:name=\"com.onesignal.NotificationOpened.DEFAULT\"  android:value=\"DISABLE\" />\n\n\n    </application>\n\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/AndroidManifest.xml	(revision d55e3b126d57bf5283f6632c24d5c5f37b901a91)
+++ app/src/main/AndroidManifest.xml	(date 1622653164092)
@@ -18,8 +18,7 @@
         android:supportsRtl="true"
         android:theme="@style/AppTheme"
         android:networkSecurityConfig="@xml/network_security_config"
-        android:usesCleartextTraffic="true"
-        tools:targetApi="m">
+        android:usesCleartextTraffic="true">
         <activity android:name=".view.SplashActivity">
             <intent-filter>
                 <action android:name="android.intent.action.MAIN" />
@@ -29,7 +28,8 @@
         </activity>
         <activity android:name=".view.WebActivity"
             android:screenOrientation="portrait"
-            android:windowSoftInputMode="adjustPan"/>
+            android:windowSoftInputMode="adjustPan"
+            android:usesCleartextTraffic="true"/>
         <activity android:name=".view.MainActivity"/>
 
         <uses-library
Index: app/src/main/res/xml/network_security_config.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<network-security-config>\n\n    <domain-config cleartextTrafficPermitted=\"true\">\n        <domain includeSubdomains=\"true\">127.0.0.1</domain>\n    </domain-config>\n\n</network-security-config>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/xml/network_security_config.xml	(revision d55e3b126d57bf5283f6632c24d5c5f37b901a91)
+++ app/src/main/res/xml/network_security_config.xml	(date 1622643268615)
@@ -5,4 +5,6 @@
         <domain includeSubdomains="true">127.0.0.1</domain>
     </domain-config>
 
+    <base-config cleartextTrafficPermitted="false"/>
+
 </network-security-config>
\ No newline at end of file
Index: app/src/main/java/shopping/grocery/medicine/online/deals/coupons/compare/buy/view/WebActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package shopping.grocery.medicine.online.deals.coupons.compare.buy.view\n\nimport android.Manifest\nimport android.annotation.SuppressLint\nimport android.app.AlertDialog\nimport android.content.DialogInterface\nimport android.content.Intent\nimport android.content.pm.PackageManager\nimport android.graphics.PorterDuff\nimport android.os.Build\nimport android.os.Bundle\nimport android.util.Log\nimport android.view.View\nimport android.view.animation.AnimationUtils\nimport android.webkit.*\nimport android.widget.*\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.core.app.ActivityCompat\nimport androidx.core.content.ContextCompat\nimport com.bumptech.glide.Glide\nimport com.bumptech.glide.load.engine.DiskCacheStrategy\nimport com.facebook.ads.*\nimport com.google.android.material.floatingactionbutton.FloatingActionButton\nimport com.google.firebase.analytics.FirebaseAnalytics\nimport com.google.firebase.remoteconfig.FirebaseRemoteConfig\nimport com.google.gson.Gson\nimport kotlinx.android.synthetic.main.activity_web.*\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.R\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.model.bookmark.Bookmarks\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.utils.Constants\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.utils.Pref\n\n\nclass WebActivity : AppCompatActivity() {\n\n    var webView: WebView? = null\n    var appTitle: String? = null\n    var appUrl: String? = null\n    var appIcon: String? = null\n\n    var rlWebSplash: RelativeLayout? = null\n    var ivAppIcon: ImageView? = null\n\n    private val TAG: String = WebActivity::class.java.simpleName\n    private val TIME_DELAY = 2000\n    private var back_pressed: Long = 0\n\n    private var interstitialFbAd: InterstitialAd? = null\n    private var adView: AdView? = null\n\n    var firebaseRemoteConfig: FirebaseRemoteConfig? = null\n    var firebaseAnalytics: FirebaseAnalytics? = null\n\n    var mGeoLocationRequestOrigin: String? = null\n    var mGeoLocationCallback: GeolocationPermissions.Callback? = null\n\n    lateinit var btn1: FloatingActionButton\n    lateinit var share: FloatingActionButton\n    private lateinit var bkmark: FloatingActionButton\n    private lateinit var bkmarkText: TextView\n    private lateinit var shareText: TextView\n    private var clicked = false\n\n    var bookmarksList: ArrayList<Bookmarks>? = ArrayList()\n\n    private val LOCATION_PERMISSION_CODE = 1\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_web)\n\n        initViews()\n        initData()\n\n        firebaseRemoteConfig = FirebaseRemoteConfig.getInstance()\n\n        if (firebaseRemoteConfig!!.getBoolean(Constants().SHOW_ADS)) {\n\n            onFbBannerAds()\n            onLoadFbInterstitial()\n        }\n        loadWebSplash()\n\n        ActivityCompat.requestPermissions(\n            this,\n            arrayOf(Manifest.permission.ACCESS_FINE_LOCATION), LOCATION_PERMISSION_CODE\n        )\n\n        webViewSettings()\n\n        webView?.loadUrl(appUrl!!)\n\n        btn1.setOnClickListener {\n            onButtonClicked()\n        }\n\n        share.setOnClickListener {\n            val sendIntent: Intent = Intent().setAction(Intent.ACTION_SEND)\n            sendIntent.putExtra(\n                Intent.EXTRA_TEXT, appUrl)\n            sendIntent.type = \"text/simple\"\n            val shareIntent = Intent.createChooser(sendIntent, null)\n            startActivity(shareIntent)\n        }\n\n        bkmark.setOnClickListener {\n            val bookmarks: Bookmarks? = Bookmarks()\n            bookmarks!!.bookmarkTitle = webView!!.title\n            bookmarks.bookmarkStoreTitle = appTitle\n            bookmarks.bookmarkUrl = webView!!.url\n            bookmarks.bookmarkLogo = appIcon\n\n            bookmarksList!!.add(bookmarks)\n\n            val bundle = Bundle()\n            bundle.putString(\"bookmarkTitle\", webView!!.title)\n            bundle.putString(\"bookmarkStoreTitle\", appTitle)\n            bundle.putString(\"bookmarkUrl\", webView!!.url)\n            firebaseAnalytics!!.logEvent(\"bookmarks_Usage\", bundle)\n\n            setBookmarks()\n        }\n    }\n\n    fun initViews() {\n        firebaseAnalytics = FirebaseAnalytics.getInstance(this@WebActivity)\n        webView = findViewById(R.id.webViewMain)\n        rlWebSplash = findViewById(R.id.rlWebSplash)\n        ivAppIcon = findViewById(R.id.ivAppIcon)\n        share = findViewById(R.id.button2)\n        bkmark = findViewById(R.id.button3)\n        btn1 = findViewById(R.id.button1)\n        shareText = findViewById(R.id.share)\n        bkmarkText = findViewById(R.id.bkmark)\n    }\n\n    fun initData() {\n        val bundle: Bundle? = intent.extras\n        appUrl = bundle?.getString(\"url\")\n        appIcon = bundle?.getString(\"app_icon\")\n        appTitle = bundle?.getString(\"title\")\n        Log.d(\"TAG\", \"initData: \" + bundle?.getString(\"url\"))\n\n    }\n\n    private fun setBookmarks() {\n        val bookmarksData = Gson().toJson(bookmarksList)\n        Pref.instance!!.bookmarksData = bookmarksData\n    }\n\n    fun removeBookmark(bookmarkurl: String?) {\n        if (bookmarksList != null) {\n            var i = 0\n            while (i < bookmarksList!!.size) {\n                val bookmarkData: Bookmarks = bookmarksList!!.get(i)\n                if (bookmarkData.getBookmarkUrlWithoutAffiliate() != null && bookmarkData.getBookmarkUrlWithoutAffiliate()\n                        .equals(bookmarkurl)\n                ) {\n                    bookmarksList!!.removeAt(i)\n                    //                    Toast.makeText(WebActivity.this,\"Bookmark removed successfully\",Toast.LENGTH_SHORT).show();\n                    val toast = Toast.makeText(\n                        this@WebActivity,\n                        \"Item removed from wishlist\",\n                        Toast.LENGTH_SHORT\n                    )\n                    val view = toast.view\n\n//Gets the actual oval background of the Toast then sets the colour filter\n                    view?.background?.setColorFilter(\n                        resources.getColor(R.color.black_75),\n                        PorterDuff.Mode.SRC_IN\n                    )\n\n//Gets the TextView from the Toast so it can be editted\n                    var text: TextView? = null\n                    if (view != null) {\n                        text = view.findViewById(android.R.id.message)\n                    }\n                    text?.setTextColor(resources.getColor(R.color.white))\n                    toast.show()\n                    Log.d(\"TAG\", \"removeBookmark: removed\")\n                }\n                i++\n            }\n            setBookmarks()\n        }\n    }\n\n\n    @SuppressLint(\"SetJavaScriptEnabled\")\n    fun webViewSettings() {\n        webView!!.settings.loadsImagesAutomatically = true\n        webView!!.settings.javaScriptEnabled = true\n        webView!!.settings.allowContentAccess = true\n\n        webView!!.settings.useWideViewPort = true\n        webView!!.settings.loadWithOverviewMode = true\n        webView!!.settings.domStorageEnabled = true\n        webView!!.clearView()\n        webView!!.isHorizontalScrollBarEnabled = false\n        webView!!.settings.setAppCacheEnabled(true)\n        webView!!.settings.databaseEnabled = true\n        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {\n            webView!!.settings.databasePath = \"/data/data/\" + this.packageName + \"/databases/\"\n        }\n        webView!!.isVerticalScrollBarEnabled = false\n        webView!!.settings.builtInZoomControls = true\n        webView!!.settings.displayZoomControls = false\n        webView!!.settings.allowFileAccess = true\n        webView!!.settings.pluginState = WebSettings.PluginState.OFF\n        webView!!.isScrollbarFadingEnabled = false\n        webView!!.settings.cacheMode = WebSettings.LOAD_NO_CACHE\n        webView!!.settings.defaultZoom = WebSettings.ZoomDensity.FAR\n        webView!!.webViewClient = WebViewClient()\n        webView!!.settings.setRenderPriority(WebSettings.RenderPriority.HIGH)\n        webView!!.setInitialScale(1)\n\n        webView!!.webViewClient = object : WebViewClient() {\n            override fun shouldOverrideUrlLoading(\n                view: WebView,\n                request: WebResourceRequest\n            ): Boolean {\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n                    view.loadUrl(request.url.toString())\n                }\n                return false\n            }\n        }\n\n        webView!!.webChromeClient = object : WebChromeClient() {\n\n            override fun onGeolocationPermissionsShowPrompt(\n                origin: String?,\n                callback: GeolocationPermissions.Callback?\n            ) {\n                if (ContextCompat.checkSelfPermission(\n                        this@WebActivity,\n                        Manifest.permission.ACCESS_FINE_LOCATION\n                    )\n                    != PackageManager.PERMISSION_GRANTED\n                ) {\n\n                    if (ActivityCompat.shouldShowRequestPermissionRationale(\n                            this@WebActivity,\n                            Manifest.permission.ACCESS_FINE_LOCATION\n                        )\n                    ) {\n                        AlertDialog.Builder(this@WebActivity)\n                            .setMessage(\"Please turn ON the GPS to make app work smoothly\")\n                            .setNeutralButton(\n                                android.R.string.ok,\n                                DialogInterface.OnClickListener { dialogInterface, i ->\n                                    mGeoLocationCallback = callback\n                                    mGeoLocationRequestOrigin = origin\n                                    ActivityCompat.requestPermissions(\n                                        this@WebActivity,\n                                        arrayOf(Manifest.permission.ACCESS_FINE_LOCATION),\n                                        1001\n                                    )\n\n                                })\n                            .show()\n\n                    } else {\n                        //no explanation need we can request the locatio\n                        mGeoLocationCallback = callback\n                        mGeoLocationRequestOrigin = origin\n                        ActivityCompat.requestPermissions(\n                            this@WebActivity,\n                            arrayOf(Manifest.permission.ACCESS_FINE_LOCATION), 1001\n                        )\n                    }\n                } else {\n                    //tell the webview that permission has granted\n                    callback!!.invoke(origin, true, true)\n                }\n            }\n\n\n            override fun onProgressChanged(view: WebView?, newProgress: Int) {\n                super.onProgressChanged(view, newProgress)\n                if (newProgress >= 80) {\n                    rlWebSplash!!.visibility = View.GONE\n                }\n            }\n\n        }\n    }\n\n    override fun onRequestPermissionsResult(\n        requestCode: Int,\n        permissions: Array<out String>,\n        grantResults: IntArray\n    ) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\n\n        when (requestCode) {\n            1001 -> {\n                //if permission is cancel result array would be empty\n                if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                    //permission was granted\n                    if (mGeoLocationCallback != null) {\n                        mGeoLocationCallback!!.invoke(mGeoLocationRequestOrigin, true, true)\n                    }\n                } else {\n                    //permission denied\n                    if (mGeoLocationCallback != null) {\n                        mGeoLocationCallback!!.invoke(mGeoLocationRequestOrigin, false, false)\n                    }\n                }\n            }\n        }\n\n    }\n\n    fun loadWebSplash() {\n        Glide.with(ivAppIcon!!.context)\n            .load(appIcon)\n            .diskCacheStrategy(DiskCacheStrategy.ALL)\n            .into(ivAppIcon!!)\n    }\n\n    fun onLoadFbInterstitial() {\n        interstitialFbAd = InterstitialAd(this, Constants().getFbInterstitialWebExit())\n\n        val interstitialAdListener: InterstitialAdListener = object : InterstitialAdListener {\n            override fun onInterstitialDisplayed(ad: Ad) {\n                // Interstitial ad displayed callback\n                Log.e(TAG, \"Interstitial ad displayed.\")\n            }\n\n            override fun onInterstitialDismissed(ad: Ad) {\n                // Interstitial dismissed callback\n                Log.e(TAG, \"Interstitial ad dismissed.\")\n                finish()\n            }\n\n            override fun onError(ad: Ad?, adError: AdError) {\n                // Ad error callback\n                Log.e(TAG, \"Interstitial ad failed to load: \" + adError.getErrorMessage())\n            }\n\n            override fun onAdLoaded(ad: Ad) {\n                // Interstitial ad is loaded and ready to be displayed\n                Log.d(TAG, \"Interstitial ad is loaded and ready to be displayed!\")\n                // Show the ad\n//                interstitialFbAd.show()\n            }\n\n            override fun onAdClicked(ad: Ad) {\n                // Ad clicked callback\n                Log.d(TAG, \"Interstitial ad clicked!\")\n            }\n\n            override fun onLoggingImpression(ad: Ad) {\n                // Ad impression logged callback\n                Log.d(TAG, \"Interstitial ad impression logged!\")\n            }\n        }\n\n        interstitialFbAd!!.loadAd(\n            interstitialFbAd!!.buildLoadAdConfig()\n                .withAdListener(interstitialAdListener)\n                .build()\n        );\n\n    }\n\n    fun onFbBannerAds() {\n        adView = AdView(this, Constants().getFbBannerWeb(), AdSize.BANNER_HEIGHT_50)\n\n        // Find the Ad Container\n        val adContainer = findViewById<View>(R.id.banner_container) as LinearLayout\n\n        // Add the ad view to your activity layout\n        adContainer.addView(adView)\n\n        val adListenerBanner: com.facebook.ads.AdListener = object : com.facebook.ads.AdListener {\n            override fun onError(ad: Ad?, adError: AdError) {\n                // Ad error callback\n            }\n\n            override fun onAdLoaded(ad: Ad?) {\n                Log.d(TAG, \"onAdLoaded: Banner\")\n            }\n\n            override fun onAdClicked(ad: Ad?) {\n                // Ad clicked callback\n            }\n\n            override fun onLoggingImpression(ad: Ad?) {\n                // Ad impression logged callback\n            }\n        }\n\n        // Request an ad\n        adView!!.loadAd(adView!!.buildLoadAdConfig().withAdListener(adListenerBanner).build())\n    }\n\n    public override fun onPause() {\n//        adView.pause()\n        super.onPause()\n    }\n\n    // Called when returning to the activity\n    public override fun onResume() {\n        super.onResume()\n//        adView.resume()\n    }\n\n    // Called before the activity is destroyed\n    public override fun onDestroy() {\n        if (adView != null) {\n            adView!!.destroy()\n        }\n        super.onDestroy()\n    }\n\n    override fun onBackPressed() {\n\n        if (back_pressed + TIME_DELAY > System.currentTimeMillis()) {\n            super.onBackPressed()\n        } else {\n            Toast.makeText(\n                getBaseContext(), \"Double click to exit!\",\n                Toast.LENGTH_SHORT\n            ).show();\n            if (webView!!.canGoBack()) {\n                webView!!.goBack()\n            } else {\n                if (interstitialFbAd != null && interstitialFbAd!!.isAdLoaded) {\n                    if (interstitialFbAd!!.isAdInvalidated) {\n                    } else {\n                        interstitialFbAd!!.show()\n                    }\n                } else {\n                    super.onBackPressed()\n                }\n\n            }\n        }\n        back_pressed = System.currentTimeMillis();\n\n    }\n\n    private fun onButtonClicked() {\n\n        if (!clicked) {\n            share.visibility = View.VISIBLE\n            bkmark.visibility = View.VISIBLE\n            shareText.visibility = View.VISIBLE\n            bkmarkText.visibility = View.VISIBLE\n        } else {\n            share.visibility = View.INVISIBLE\n            bkmark.visibility = View.INVISIBLE\n            shareText.visibility = View.INVISIBLE\n            bkmarkText.visibility = View.INVISIBLE\n        }\n\n        if (!clicked) {\n            share.startAnimation(\n                AnimationUtils.loadAnimation(\n                    applicationContext,\n                    R.anim.from_bottom\n                )\n            )\n            bkmark.startAnimation(\n                AnimationUtils.loadAnimation(\n                    applicationContext,\n                    R.anim.from_bottom\n                )\n            )\n            shareText.startAnimation(\n                AnimationUtils.loadAnimation(\n                    applicationContext,\n                    R.anim.from_left\n                )\n            )\n            bkmarkText.startAnimation(\n                AnimationUtils.loadAnimation(\n                    applicationContext,\n                    R.anim.from_left\n                )\n            )\n            btn1.startAnimation(\n                AnimationUtils.loadAnimation(\n                    applicationContext,\n                    R.anim.rotate_open\n                )\n            )\n        } else {\n            share.startAnimation(AnimationUtils.loadAnimation(applicationContext, R.anim.to_bottom))\n            bkmark.startAnimation(\n                AnimationUtils.loadAnimation(\n                    applicationContext,\n                    R.anim.to_bottom\n                )\n            )\n\n            shareText.startAnimation(\n                AnimationUtils.loadAnimation(\n                    applicationContext,\n                    R.anim.to_left\n                )\n            )\n            bkmarkText.startAnimation(\n                AnimationUtils.loadAnimation(\n                    applicationContext,\n                    R.anim.to_left\n                )\n            )\n            btn1.startAnimation(\n                AnimationUtils.loadAnimation(\n                    applicationContext,\n                    R.anim.rotate_close\n                )\n            )\n        }\n\n        if (!clicked) {\n            share.isClickable = true\n            bkmark.isClickable = true\n            shareText.isClickable = true\n            bkmarkText.isClickable = true\n        } else {\n            share.isClickable = false\n            bkmark.isClickable = false\n            shareText.isClickable = false\n            bkmarkText.isClickable = false\n        }\n        clicked = !clicked\n    }\n//\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/shopping/grocery/medicine/online/deals/coupons/compare/buy/view/WebActivity.kt	(revision d55e3b126d57bf5283f6632c24d5c5f37b901a91)
+++ app/src/main/java/shopping/grocery/medicine/online/deals/coupons/compare/buy/view/WebActivity.kt	(date 1622643509736)
@@ -88,6 +88,7 @@
 
         webViewSettings()
 
+        Log.d(TAG, "onCreate: appUrl"+appUrl)
         webView?.loadUrl(appUrl!!)
 
         btn1.setOnClickListener {
Index: app/src/main/java/shopping/grocery/medicine/online/deals/coupons/compare/buy/view/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package shopping.grocery.medicine.online.deals.coupons.compare.buy.view\n\nimport android.app.Dialog\nimport android.content.Intent\nimport android.net.Uri\nimport android.os.Bundle\nimport android.text.Editable\nimport android.text.TextWatcher\nimport android.util.Log\nimport android.view.MenuItem\nimport android.view.View\nimport android.view.WindowManager\nimport android.widget.EditText\nimport android.widget.ImageView\nimport androidx.appcompat.app.AlertDialog\nimport androidx.fragment.app.FragmentPagerAdapter\nimport androidx.lifecycle.Observer\nimport androidx.lifecycle.ViewModelProvider\nimport androidx.recyclerview.widget.GridLayoutManager\nimport androidx.recyclerview.widget.RecyclerView\nimport com.google.android.material.tabs.TabLayout\nimport com.google.firebase.analytics.FirebaseAnalytics\nimport com.google.firebase.remoteconfig.BuildConfig\nimport github.com.st235.lib_expandablebottombar.ExpandableBottomBar\nimport kotlinx.android.synthetic.main.activity_main.*\nimport me.toptas.fancyshowcase.FancyShowCaseView\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.R\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.base.BaseActivity\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.utils.CustomViewPager\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.utils.ForceUpdateChecker\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.view.adapter.home.AllAppsAdapter\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.view.fragment.CategoryFragment\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.view.fragment.DealFragment\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.view.fragment.FragmentHome\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.view.listener.AllAppsItemClickListener\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.viewmodel.CategoryViewModel\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.viewmodel.DealsViewModel\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.viewmodel.GlobalViewModel\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.viewmodel.HomeViewModel\nimport shopping.grocery.medicine.online.deals.coupons.compare.buy.viewpager.AppPagerAdapter\n\n\nclass MainActivity : BaseActivity(), AllAppsItemClickListener<List<String>>,\n    ForceUpdateChecker.OnUpdateNeededListener {\n\n    var viewPager: CustomViewPager? = null\n    var viewPagerTab: TabLayout? = null\n    var fragmentPagerAdapter: FragmentPagerAdapter? = null\n    var homeViewModel: HomeViewModel? = null\n    var globalViewModel: GlobalViewModel? = null\n    var dealsViewModel: DealsViewModel? = null\n    var categoryViewModel: CategoryViewModel? = null\n    var firebaseAnalytics: FirebaseAnalytics? = null\n\n    private lateinit var bottomNav: ExpandableBottomBar\n\n    var search_rvCountryStores: RecyclerView? = null\n\n    var appsList: ArrayList<List<String>>? = ArrayList()\n\n    val filterList: ArrayList<List<String>> = ArrayList()\n\n    var dialog: Dialog? = null\n\n    var allAppsAdapter: AllAppsAdapter? = null\n\n    lateinit var search: ImageView\n\n    override val bindingVariable: Int\n        get() = 0\n    override val layoutId: Int\n        get() = 0\n    var bool: Boolean = false\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n\n        initViews()\n\n        dialog = Dialog(this)\n\n        ForceUpdateChecker().with(this)!!.onUpdateNeeded(this).check()\n\n        homeViewModel = ViewModelProvider(this).get(HomeViewModel::class.java)\n        dealsViewModel = ViewModelProvider(this).get(DealsViewModel::class.java)\n        categoryViewModel = ViewModelProvider(this).get(CategoryViewModel::class.java)\n        globalViewModel = ViewModelProvider(this).get(GlobalViewModel::class.java)\n\n\n        homeViewModel?.loadData()\n\n        homeViewModel!!.allAppsLiveData.observe(this, Observer { t ->\n            Log.d(\"TAG\", \"HomeFragment Live allAppsLiveData$t\")\n            appsList!!.clear()\n            if (t != null) {\n                appsList?.addAll(t)\n            }\n        })\n\n        search.setOnClickListener {\n            onShowStores(appsList!!)\n        }\n//\n        viewPagerTab!!.addOnTabSelectedListener(object : TabLayout.OnTabSelectedListener {\n            override fun onTabSelected(tab: TabLayout.Tab) {\n                Log.d(\"TAG\", \"onTabSelected: \" + tab.position)\n                val bundleAppUsage = Bundle()\n                bundleAppUsage.putString(\"tab_click\", tab.text.toString())\n                onUpdateLogEvent(bundleAppUsage, \"app_usage\", false)\n            }\n\n            override fun onTabUnselected(tab: TabLayout.Tab) {}\n            override fun onTabReselected(tab: TabLayout.Tab) {}\n        })\n\n        setupViewPager()\n\n        val menu = bottomNav.menu\n\n        menu.select(R.id.id_home)\n//        viewPager!!.currentItem = 0\n\n\n        bottomNav.onItemSelectedListener = { view, menuItem, bool ->\n            when (menuItem.id) {\n                R.id.id_home -> {\n\n                    viewPager!!.currentItem = 0\n                    fancy(view, \"Home\")\n\n                }\n                R.id.id_category -> {\n\n                    viewPager!!.currentItem = 1\n                    fancy(view, \"Category\")\n                }\n                R.id.id_deals -> {\n\n                    viewPager!!.currentItem = 2\n                    fancy(view, \"Deals\")\n                }\n                R.id.id_bookmark -> {\n\n                    viewPager!!.currentItem = 3\n                    fancy(view, \"Deals\")\n                }\n            }\n        }\n    }\n\n    private fun initViews() {\n        firebaseAnalytics = FirebaseAnalytics.getInstance(this)\n        bottomNav = findViewById(R.id.expandable_bottom_bar)\n        viewPager = findViewById(R.id.vpPager)\n        viewPagerTab = findViewById(R.id.view_pager_tab)\n        search = findViewById(R.id.search)\n    }\n\n    private fun fancy(it: View, title: String) {\n        return FancyShowCaseView.Builder(this).focusOn(it).title(title).delay(50).showOnce(title)\n            .build()\n            .show()\n    }\n\n    private fun onShowStores(list: ArrayList<List<String>>) {\n        dialog!!.setContentView(R.layout.dialog_search)\n\n        dialog!!.window!!.setLayout(\n            WindowManager.LayoutParams.MATCH_PARENT,\n            WindowManager.LayoutParams.MATCH_PARENT\n        );\n\n        search_rvCountryStores = dialog!!.findViewById(R.id.search_rvCategoryStores)\n\n        setRecyclerView()\n\n        allAppsAdapter!!.setItems(list)\n\n        dialog!!.show()\n\n    }\n\n    private fun setRecyclerView() {\n        allAppsAdapter = AllAppsAdapter(applicationContext)\n        allAppsAdapter!!.setListener(this)\n        search_rvCountryStores.apply {\n            search_rvCountryStores?.layoutManager = GridLayoutManager(this@MainActivity, 3)\n            search_rvCountryStores?.adapter = allAppsAdapter\n\n            val appSearchView: EditText = dialog!!.findViewById(R.id.app_search)\n            filterList.clear()\n            filterList.addAll(appsList!!)\n\n            appSearchView.addTextChangedListener(textwatcher)\n        }\n    }\n\n    private val textwatcher = object : TextWatcher {\n\n\n        override fun beforeTextChanged(\n            charSequence: CharSequence?,\n            start: Int,\n            count: Int,\n            after: Int\n        ) {\n        }\n\n        override fun onTextChanged(\n            charSequence: CharSequence?,\n            start: Int,\n            before: Int,\n            count: Int\n        ) {\n\n            Log.d(\"Filter\", filterList.toString())\n\n            val searchChar = charSequence.toString().toLowerCase()\n            Log.d(\"filterSea\", searchChar)\n\n            val itemsModal = ArrayList<List<String>>()\n\n            for (item in filterList) {\n                if (item[1].toLowerCase().contains(searchChar)) {\n                    Log.d(\"filterdone\", item[1])\n                    Log.d(\"filterChar\", searchChar)\n                    itemsModal.add(item)\n                }\n            }\n\n            appsList!!.clear()\n            appsList!!.addAll(itemsModal)\n            Log.d(\"filterList\", itemsModal.toString())\n            allAppsAdapter!!.setItems(appsList)\n            allAppsAdapter!!.notifyDataSetChanged()\n        }\n\n        override fun afterTextChanged(s: Editable?) {\n        }\n    }\n\n    private fun setupViewPager() {\n\n        fragmentPagerAdapter = AppPagerAdapter(supportFragmentManager)\n        viewPager!!.adapter = fragmentPagerAdapter\n        val limit =\n            if ((fragmentPagerAdapter as AppPagerAdapter).count > 1) (fragmentPagerAdapter as AppPagerAdapter).count - 1 else 1\n        viewPager!!.offscreenPageLimit = limit;\n        viewPager!!.currentItem = 0\n\n        viewPager!!.setSwipePagingEnabled(false)\n\n        viewPagerTab!!.setupWithViewPager(viewPager)\n\n    }\n\n    override fun onDestroy() {\n        homeViewModel?.reset()\n        globalViewModel?.reset()\n        dealsViewModel?.reset()\n        categoryViewModel?.reset()\n        super.onDestroy()\n\n    }\n\n    override fun onUpdateNeeded(updateUrl: String?) {\n        val dialog = AlertDialog.Builder(this)\n            .setTitle(\"New version available\")\n            .setMessage(\"Please, update app to new version to continue shopping.\")\n            .setPositiveButton(\n                \"Update\"\n            ) { dialog, which -> redirectStore(updateUrl!!) }.setNegativeButton(\n                \"No, thanks\"\n            ) { dialog, which -> finish() }.create()\n        dialog.show()\n\n    }\n\n    private fun redirectStore(updateUrl: String) {\n        val intent = Intent(Intent.ACTION_VIEW, Uri.parse(updateUrl))\n        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\n        startActivity(intent)\n    }\n\n    fun onUpdateLogEvent(bundle: Bundle, eventName: String, isUrlVisited: Boolean) {\n        Log.d(\"TAG\", \"onUpdateLogEvent: \")\n        if (BuildConfig.DEBUG) {\n            return\n        } else {\n            if (isUrlVisited) {\n                firebaseAnalytics!!.logEvent(eventName, bundle)\n                firebaseAnalytics!!.logEvent(\"url_visited\", bundle)\n            } else\n                firebaseAnalytics!!.logEvent(eventName, bundle)\n        }\n    }\n\n    override fun onAllCardClick(item: List<String>) {\n        Log.d(\"TAG\", \"onAllCardClick: \" + item[1])\n\n        if (item[1] == \"Amazon\") {\n\n            if (bool) {\n                val browserIntent = Intent(Intent.ACTION_VIEW, Uri.parse(item[2]))\n                startActivity(browserIntent)\n            } else {\n                val intent: Intent = Intent(this, WebActivity::class.java)\n                intent.putExtra(\"title\", item[1])\n                intent.putExtra(\"url\", item[2])\n                intent.putExtra(\"app_icon\", item[3])\n\n                startActivity(intent)\n            }\n        } else {\n            val intent: Intent = Intent(this, WebActivity::class.java)\n            intent.putExtra(\"title\", item[1])\n            intent.putExtra(\"url\", item[2])\n            intent.putExtra(\"app_icon\", item[3])\n\n            startActivity(intent)\n        }\n\n        val bundle = Bundle()\n        bundle.putString(\"title\", item[1])\n        bundle.putString(\"url\", item[2])\n\n        this.onUpdateLogEvent(bundle, \"all_apps_visited\", true)\n    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/shopping/grocery/medicine/online/deals/coupons/compare/buy/view/MainActivity.kt	(revision d55e3b126d57bf5283f6632c24d5c5f37b901a91)
+++ app/src/main/java/shopping/grocery/medicine/online/deals/coupons/compare/buy/view/MainActivity.kt	(date 1622642979119)
@@ -95,7 +95,7 @@
             Log.d("TAG", "HomeFragment Live allAppsLiveData$t")
             appsList!!.clear()
             if (t != null) {
-                appsList?.addAll(t)
+                appsList?.addAll(t.getValues()!!)
             }
         })
 
